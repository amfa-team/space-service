service: space-service-api

frameworkVersion: ^2.11.0

configValidationMode: error

plugins:
  - serverless-dotenv-plugin
  - serverless-stage-manager
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-webpack
  - serverless-plugin-monorepo
  - serverless-s3-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-3
  memorySize: 512
  stage: ${opt:stage}
  profile: picnic
  environment:
    SENTRY_ENVIRONMENT: "${self:provider.stage}"
    SENTRY_DNS: "${env:SENTRY_DNS}"
    MONGO_DB_URL: "${env:MONGO_DB_URL}"
    WEBSOCKET_DOMAIN: "#{WebsocketsApi}.execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}"
    DOMAIN: ${self:custom.sbs.domains.${opt:stage, self:provider.stage}}
    S3_IMAGE_BUCKET: ${self:custom.sbs.bucketName.${opt:stage, self:provider.stage}}
    API_SECRET: "${env:API_SECRET}"
    USER_SERVICE_API_SECRET: "${env:USER_SERVICE_API_SECRET}"
    MAX_POOL_SIZE: ${env:MAX_POOL_SIZE, 20}
    MIN_POOL_SIZE: ${env:MIN_POOL_SIZE, 2}
    POOL_SIZE: ${env:POOL_SIZE, 10}
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:custom.sbs.bucketName.${opt:stage, self:provider.stage}}/*"

package:
  individually: false

functions:
  - ${file(./serverless/api.yml)}
  - ${file(./serverless/admin.yml)}
  - ${file(./serverless/websocket.yml)}

resources:
  Resources:
    ClientBucketResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.sbs.bucketName.${opt:stage, self:provider.stage}}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000
custom:
  sbs:
    bucketName:
      production: space-service-images-production
      staging: space-service-images-staging
      dev: space-service-images-staging
    domains:
      production: "space.sidebyside.live"
      staging: "space.dev.sidebyside.live"
      dev: "localhost"
    wsDomains:
      production: "space-ws.sidebyside.live"
      staging: "space-ws.dev.sidebyside.live"
      dev: "localhost"

  serverless-offline:
    useChildProcesses: true
    httpPort: 4000

  webpack:
    webpackConfig: "webpack.config.js"
    keepOutputDirectory: true
    includeModules: true
    packager: "yarn"
    excludeFiles: src/**/*.test.js

  stages:
    - dev
    - production
    - staging

  customDomain:
    rest:
      domainName: ${self:custom.sbs.domains.${opt:stage, self:provider.stage}}
      stage: ${opt:stage}
      basePath: api
      certificateName: "*.sidebyside.live"
      createRoute53Record: true
      endpointType: "regional"
      apiType: rest
      autoDomain: true
    websocket:
      domainName: ${self:custom.sbs.wsDomains.${opt:stage, self:provider.stage}}
      stage: ${opt:stage}
      certificateName: "*.sidebyside.live"
      createRoute53Record: true
      endpointType: "regional"
      apiType: websocket
      autoDomain: true

  s3:
    host: localhost
    cors: ./serverless/cors-s3.xml
    allowMismatchedSignatures: true
